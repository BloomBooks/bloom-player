/* These rules mostly tweak fixed print layouts, currently enforcing 16x9 layout,
like Bloom Reader, and overriding rules, mainly from previewMode.css, that we don't
want in this control.
Much of it could go away if we exclude previewMode.css, or if we end up with a server
process which produces an htm file in the Bloom Reader state, or if we re-architect so
there is some simple way like a root class to toggle a book's appearance to BR mode.*/

@hoverNextPrevButtonBar: #cbcbcb;
@contextPageBackground: darkgray; // #a9a9a9
@disabledButton: @contextPageBackground;
@audioHighlighting: yellow; // #ffff00

@bloomGrey: #2e2e2e; // also defined in bloomPlayerTheme.ts
@bloomRed: #d65649;
@bloomGrey: #2e2e2e; // also defined in bloomPlayerTheme.ts

/* The Andika New Basic font might be found already installed. Failing that,
 * if we're inside BloomReader or RAB, we should be able to get it at the standard
 * URL for assets embedded in the program. If instead we're embedded in a web
 * page like BloomLibrary.org, we need to download from the web.
 * Note that currently that last option will only work when the page origin
 * is *bloomlibrary.org. This helps limit our exposure to large charges from
 * people using our font arbitrarily. This does include, however, books
 * displayed in an iframe using https://bloomlibrary.org/bloom-player/bloomplayer.htm*/
@font-face {
    font-family: "Andika New Basic";
    font-weight: normal;
    font-style: normal;
    src: local("Andika New Basic"),
        url("file:///android_asset/fonts/Andika New Basic/AndikaNewBasic-R.ttf"),
        url("https://bloomlibrary.org/fonts/Andika%20New%20Basic/AndikaNewBasic-R.woff");
}

@font-face {
    font-family: "Andika New Basic";
    font-weight: bold;
    font-style: normal;
    src: local("Andika New Basic Bold"),
        url("file:///android_asset/fonts/Andika New Basic/AndikaNewBasic-B.ttf"),
        url("https://bloomlibrary.org/fonts/Andika%20New%20Basic/AndikaNewBasic-B.woff");
}

@font-face {
    font-family: "Andika New Basic";
    font-weight: normal;
    font-style: italic;
    src: local("Andika New Basic Italic"),
        url("file:///android_asset/fonts/Andika New Basic/AndikaNewBasic-I.ttf"),
        url("https://bloomlibrary.org/fonts/Andika%20New%20Basic/AndikaNewBasic-I.woff");
}

@font-face {
    font-family: "Andika New Basic";
    font-weight: bold;
    font-style: italic;
    src: local("Andika New Basic Bold Italic"),
        url("file:///android_asset/fonts/Andika New Basic/AndikaNewBasic-BI.ttf"),
        url("https://bloomlibrary.org/fonts/Andika%20New%20Basic/AndikaNewBasic-BI.woff");
}

/* The rules in the book reset this counter at the body level, but since we scope our
rules to apply at a lower level, that rule doesn't work. We need to reset at a level
above the page so that page numbers will increment.*/
.pageSlider {
    counter-reset: pageNumber;
}

/* makes context pages smaller and dimmer than regular ones */
.bloomPlayer .pageSlider .contextPage .bloom-page {
    margin-left: 10%;
    width: 80%;
    margin-top: 10%;
    padding-top: calc(80% * 16 / 9); /* of width! */
    opacity: 0.6;
    background-color: @contextPageBackground;
}

// For chrome and safari, we can deal with highlighting overlapping lines. See BL-7442.
// This media query is supposed to be a way to detect Chrome/Safari.
// Actually: this did not prevent it from applying in Firefox,: @media screen and (-webkit-min-device-pixel-ratio: 0) {
// Nor did this: @supports (-webkit-appearance: none) {
/*@media screen and (-webkit-min-device-pixel-ratio: 0) {
    span.ui-audioCurrent:not(.disableHighlight) {
        background: linear-gradient(@audioHighlighting, @audioHighlighting);
        background-blend-mode: overlay;
        mix-blend-mode: overlay;
    }
}*/

// The above doesn't work on Firefox (through FF 68) (or in Bloom or 2019-era Edge). For those, we can at least
// deal with the most common case of overlap (the book title on the cover) by just
// treating the text as a rectangle. And it's fine that this will show this way in Chrome too:
.Title-On-Cover-style span.ui-audioCurrent:not(.disableHighlight) {
    display: inline-block;
}
span.ui-audioCurrent:not(.disableHighlight),
div.ui-audioCurrent:not(.disableHighlight) p {
    background-color: @audioHighlighting;
}

div.ui-audioCurrentImg {
    box-sizing: border-box;
    border: 5px solid @audioHighlighting;
}

/* the default positioning of these dots is inside the page area, but our pages overlap them.
Also, if there are more than will fit on a line, some drop outside the control altogether.
We just make them follow the main content normally. */
.bloomPlayer .slick-dots {
    position: relative;
    bottom: initial;
}

@button-radius: 2mm;

// using the ID for greater specificity than material-ui rules
#control-bar {
    .filler {
        flex-grow: 1;
    }
    transition: margin-top 0.3s;
    &.visible {
        margin-top: 0;
    }

    // The React/Material UI libraries we're using overlay the toolbar on top of our view.
    // But we want to conditionally make the book fully visible, hiding the app bar with the appearance of sliding it up.
    // To achieve this we give the bar a negative top margin which matches its height.
    // It needs to be responsive in the same way as the toolbar height rules.
    // These rules are derived from the compiled MaterialUI ones for toolbar minHeight.
    margin-top: -56px;
    @media (min-width: 0px) and (orientation: landscape) {
        margin-top: -48px;
    }
    @media (min-width: 600px) {
        margin-top: -64px;
    }
}

// We need these outer conditions for specificity
.bloomPlayer {
    // these buttons are positioned relative to the slider, our preview.
    // Usually the buttons are outside the slider, just touching it; but this
    // takes them outside our phone's display. This puts them just inside it.
    .swiper-button-next {
        border-radius: @button-radius 0 0 @button-radius;
        // The white icons (hover) were produced from artwork/page right icon.svg by
        // - saving in inkscape as plain svg,
        // - open in text editor
        // - copy svg to https://yoksel.github.io/url-encoder/
        // - copy 'ready for CSS' output here
        // I've also checked in grey versions of the icon files.
        // That icon file was in turn produced by tracing over the one Readium
        // produces, which comes from a special font called glyphicons-halflings.
        // Embedding the SVG like this bypasses all the complications of making
        // the build system put the svg file where we can find it, for all the
        // clients of bloom-player, and saves a server round trip to boot.
        // background-image: url("data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8' standalone='no'%3F%3E%3Csvg xmlns:dc='http://purl.org/dc/elements/1.1/' xmlns:cc='http://creativecommons.org/ns%23' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns%23' xmlns:svg='http://www.w3.org/2000/svg' xmlns='http://www.w3.org/2000/svg' id='svg8' version='1.1' viewBox='0 0 27.970858 38.994908' height='38.994907mm' width='27.970858mm'%3E%3Cdefs id='defs2' /%3E%3Cmetadata id='metadata5'%3E%3Crdf:RDF%3E%3Ccc:Work rdf:about=''%3E%3Cdc:format%3Eimage/svg+xml%3C/dc:format%3E%3Cdc:type rdf:resource='http://purl.org/dc/dcmitype/StillImage' /%3E%3Cdc:title%3E%3C/dc:title%3E%3C/cc:Work%3E%3C/rdf:RDF%3E%3C/metadata%3E%3Cg transform='translate(-141.18819,-97.448151)' id='layer1'%3E%3Cpath id='path828' d='m 149.59443,97.63443 -7.81763,7.81763 11.02487,11.42578 -11.42577,11.09168 8.15171,8.28536 19.44386,-19.5775 z' style='fill:%23b2b2b2;stroke:%23b2b2b2;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:1' /%3E%3C/g%3E%3C/svg%3E%0A");
        // &:hover {
        //     background-image: url("data:image/svg+xml,%3Csvg xmlns:dc='http://purl.org/dc/elements/1.1/' xmlns:cc='http://creativecommons.org/ns%23' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns%23' xmlns:svg='http://www.w3.org/2000/svg' xmlns='http://www.w3.org/2000/svg' id='svg8' version='1.1' viewBox='0 0 27.970858 38.994908' height='38.994907mm' width='27.970858mm'%3E%3Cdefs id='defs2' /%3E%3Cmetadata id='metadata5'%3E%3Crdf:RDF%3E%3Ccc:Work rdf:about=''%3E%3Cdc:format%3Eimage/svg+xml%3C/dc:format%3E%3Cdc:type rdf:resource='http://purl.org/dc/dcmitype/StillImage' /%3E%3Cdc:title%3E%3C/dc:title%3E%3C/cc:Work%3E%3C/rdf:RDF%3E%3C/metadata%3E%3Cg transform='translate(-141.18819,-97.448151)' id='layer1'%3E%3Cpath id='path828' d='m 149.59443,97.63443 -7.81763,7.81763 11.02487,11.42578 -11.42577,11.09168 8.15171,8.28536 19.44386,-19.5775 z' style='fill:%23ffffff;stroke:%23ffffff;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:1' /%3E%3C/g%3E%3C/svg%3E");
        // }
    }
    .swiper-button-prev {
        // curved on right, flush on left.
        border-radius: 0 @button-radius @button-radius 0;
        // Not quite sure why this is needed on the left button and not the right;
        // possibly the scroller has it before the actual page where the right button
        // is after it, and by default this puts it behind. Anyway, this allows all
        // of it to be seen, even when over the preview.
        z-index: 1;
        // See comment on swiper-button-next above
        // background-image: url("data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8' standalone='no'%3F%3E%3Csvg xmlns:dc='http://purl.org/dc/elements/1.1/' xmlns:cc='http://creativecommons.org/ns%23' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns%23' xmlns:svg='http://www.w3.org/2000/svg' xmlns='http://www.w3.org/2000/svg' id='svg8' version='1.1' viewBox='0 0 27.970858 38.994908' height='38.994907mm' width='27.970858mm'%3E%3Cdefs id='defs2' /%3E%3Cmetadata id='metadata5'%3E%3Crdf:RDF%3E%3Ccc:Work rdf:about=''%3E%3Cdc:format%3Eimage/svg+xml%3C/dc:format%3E%3Cdc:type rdf:resource='http://purl.org/dc/dcmitype/StillImage' /%3E%3Cdc:title%3E%3C/dc:title%3E%3C/cc:Work%3E%3C/rdf:RDF%3E%3C/metadata%3E%3Cg transform='translate(-141.18819,-97.448151)' id='layer1'%3E%3Cpath id='path828' d='m 160.75281,97.63443 7.81763,7.81763 -11.02487,11.42578 11.42577,11.09168 -8.15171,8.28536 -19.44386,-19.5775 z' style='fill:%23b2b2b2;fill-opacity:1;stroke:%23b2b2b2;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' /%3E%3C/g%3E%3C/svg%3E%0A");
        // &:hover {
        //     background-image: url("data:image/svg+xml,%3Csvg xmlns:dc='http://purl.org/dc/elements/1.1/' xmlns:cc='http://creativecommons.org/ns%23' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns%23' xmlns:svg='http://www.w3.org/2000/svg' xmlns='http://www.w3.org/2000/svg' id='svg8' version='1.1' viewBox='0 0 27.970858 38.994908' height='38.994907mm' width='27.970858mm'%3E%3Cdefs id='defs2' /%3E%3Cmetadata id='metadata5'%3E%3Crdf:RDF%3E%3Ccc:Work rdf:about=''%3E%3Cdc:format%3Eimage/svg+xml%3C/dc:format%3E%3Cdc:type rdf:resource='http://purl.org/dc/dcmitype/StillImage' /%3E%3Cdc:title%3E%3C/dc:title%3E%3C/cc:Work%3E%3C/rdf:RDF%3E%3C/metadata%3E%3Cg transform='translate(-141.18819,-97.448151)' id='layer1'%3E%3Cpath id='path828' d='m 160.75281,97.63443 7.81763,7.81763 -11.02487,11.42578 11.42577,11.09168 -8.15171,8.28536 -19.44386,-19.5775 z' style='fill:%23ffffff;fill-opacity:1;stroke:%23ffffff;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' /%3E%3C/g%3E%3C/svg%3E");
        // }
    }
    .swiper-button-next,
    .swiper-button-prev {
        height: 66%;
        top: 17%; // height at 66% leaves 34% spacing, half of that is 17%
        margin-top: unset; // defeat Swiper's own positioning that would throw ours off
        background-color: transparent; // except when hovering, see below.
        // This makes the grey buttons, which are all you can see when not hovering,
        // quite faint, allowing all the page content to be seen through them,
        // when not hovered over; yet there is some hint of something to click.
        opacity: 0.4;
        // the actual background-url is set in blocks not shared by next/prev
        background-repeat: no-repeat;
        background-size: 4mm;
        background-position: center;
        background-image: none; // removes swiper default; we use a font character in :before
        &:hover {
            opacity: 0.9;
            background-color: @hoverNextPrevButtonBar;
            button {
                color: @hoverNextPrevButtonBar;
            }
        }
        button {
            position: relative;
            // This is the calc. for .largeOutsideButtons; see under :not(.largeOutsideButtons) below for other calc.
            //   These are both MaterialUI things we don't control, otherwise I'd make them variables.
            //   12px = 1/2 of MuiIconButton-root padding; 0.5em = 1/2 of MuiSvgIcon-root height
            top: calc(50% - 12px - 0.5em);
            margin: 0 auto;
            display: block;
            color: @hoverNextPrevButtonBar;
            background-color: @bloomRed;
        }
        &.swiper-button-disabled {
            display: none;
        }
    }

    // Make it so the text isn't selectable
    // (This was added because when we set swiper's touchStartPreventDefault to false,
    // the clicks were allowed to go through again and a double-click on text was capable of selecting it)
    .bloom-editable {
        -ms-user-select:none;
        -moz-user-select:none;
        -webkit-user-select:none;
        -webkit-touch-callout: none;
        -khtml-user-select: none;
        user-select:none;
    }

    // BL-7162 text blocks should be scrollable if they overflow in 16 x 9 format.
    // However this can actually make stuff that used to fit stop fitting.
    // Where "line-height:normal" is ok, it largely fixes it. But just imposing that everywhere
    // is risky. So I (JH) am trying a the following approach. Admittedly, this is all a
    // bit of a hack and carries some risk. As we harvest more things, I may repent. For now, 3 steps:

    // 1) In the interior we are conservative and just let scrolls appear, even at the risk of sometimes showing one
    // (and thus pushing something off the bottom that would otherwise have been visible):
    .bloom-editable.bloom-visibility-code-on {
        overflow-y: hidden !important; // unfortunately this needs !important to override 2 basePage.less rules
    }
    // it would be more elegant to embed this rule in the one above, but I can't figure out
    // how to write it so that the .bloom-textOverPicture has to be OUTSIDE the .bloomeditable
    // but INSIDE the .bloom-player that wraps around all this.
    .bloom-textOverPicture .bloom-editable.bloom-visibility-code-on {
        // (BL-7911 -> BL-8076) The first fix made overflow hidden. Actually we want overflow to show,
        // but not generate scroll bars (that's 'visible').
        overflow-y: visible !important;
    }

    // 2) for metadata pages, we (for now) risk changing the line-height. Experimentally, which works well:
    // Don't try and apply this to the book title: BookTitles have a good reason to have
    // a lineheight that is less than "normal" (which will override the below rule), because else multi-line
    // titles spread out and look awful:    .frontCover.cover .bloom-translationGroup.bookTitle,
    .titlePage,
    .credits {
        .bloom-editable {
            // this can (and is) still be over-ridden by styles in the book. See Title-On-Title-Page for an example where it gets overridden.
            line-height: normal !important; // fixes problems with showing y scroll when not needed.
        }
    }

    // 3), on the cover, which is has a very dynamic layout, we just don't do scrollbars:
    .bloom-page.cover .bloom-editable {
        overflow-y: visible !important;
    }
}

.bloomPlayer.smallOutsideButtons,
.bloomPlayer.largeOutsideButtons {
    .swiper-button-next {
        // curved on right, flush on left.
        border-radius: 0 @button-radius @button-radius 0;
    }
    .swiper-button-prev {
        // curved on left, flush on right.
        border-radius: @button-radius 0 0 @button-radius;
    }
    .swiper-button-next,
    .swiper-button-prev {
        button {
            color: @bloomGrey;
        }
        &:hover {
            button {
                color: @hoverNextPrevButtonBar;
            }
        }
    }
}

@smallButtonSize: 0.8em;
.bloomPlayer:not(.largeOutsideButtons) {
    .swiper-button-next {
        right: 0;
        button {
            padding-left: 2px;
        }
    }
    .swiper-button-prev {
        left: 0;
        button {
            padding-right: 2px;
        }
    }
    button {
        padding: 1px 0px 1px 0px;
        svg {
            width: @smallButtonSize;
            height: @smallButtonSize;
        }
        top: calc(50% - @smallButtonSize / 2);
    }
}

// should match that defined in bloom-player-controls.tsx
@smallNavigationButtonWidth: 30px;
@largeNavigationButtonWidth: 100px;
@nonHoveredNavigationButtonOpacity: 0.5;

.bloomPlayer.smallOutsideButtons {
    .swiper-button-next,
    .swiper-button-prev {
        width: @smallNavigationButtonWidth;
    }
    .swiper-button-next {
        right: -1 * @smallNavigationButtonWidth;
    }
    .swiper-button-prev {
        left: -1 * @smallNavigationButtonWidth;
    }
}
.bloomPlayer.largeOutsideButtons {
    .swiper-button-next,
    .swiper-button-prev {
        width: @largeNavigationButtonWidth;
    }
    .swiper-button-next {
        right: -1 * @largeNavigationButtonWidth;
    }
    .swiper-button-prev {
        left: -1 * @largeNavigationButtonWidth;
    }
}

// On devices where default pointing is coarse (touchscreens: phones, tablets),
// hide the buttons completely.  Users will naturally expect to page by dragging.
@media (pointer: coarse) {
    // We need these outer conditions for specificity
    .bloomPlayer {
        .swiper-button-next,
        .swiper-button-prev {
            visibility: hidden;
        }
        // Reverse the extra scaling on touch devices, since we don't need it if
        // not showing the buttons. (For more, search for extraScalingForChrome85Bug.)
        // Basically we're scaling up this box to make up for an extra amount its
        // parent was scaled down. We can't just make a rule to modify the scaling on
        // the parent, because the exact amount of scaling there is computed.
        &.extraScalingForChrome85Bug {
            .swiper-container {
                transform: scale(1.11111);
            }
        }
    }
    .bloomPlayer.showNavigationButtonsEvenOnTouchDevices {
        .swiper-button-next,
        .swiper-button-prev {
            visibility: visible;
        }
        // If we need the buttons, we are back to possibly needing extra scaling
        // to have room for them. See above and search for extraScalingForChrome85Bug.
        &.extraScalingForChrome85Bug {
            .swiper-container {
                transform: scale(1);
            }
        }
    }
}

.bigButtonOverlay {
    position: absolute;
    // Did a lot of fiddling here to try to get the button centered,
    // large, and scaling with the book. I have not yet succeeded
    // in getting the hover shadow to be circular, but decided not
    // to focus on the problem as JohnH is likely to want to tweak
    // things anyway. If you mess with this, make sure things work
    // in landscape as well as portrait and with black bars on
    // the top as well as the sides and with a very short, wide
    // viewport.
    top: 10%;
    left: 10%;
    bottom: 10%;
    right: 10%;
    padding-top: 48px; // same as control bar
    display: flex;
    z-index: 2;
    justify-content: center;
    justify-items: center;
    // pass through clicks outside the actual play icon (e.g., on next page button)
    pointer-events: none;
    svg {
        width: 80%;
        height: 80%;
        opacity: 50%;
        // But the actual icon wants them
        pointer-events: all;
    }
    button {
        width: 80%;
    }
    .MuiIconButton-label {
        // without this the icon can overflow vertically, with the button bigger than parent.
        // But this makes the shadow very tall in some situations.
        // Seems like max-height should work, but although it produces a .MuiIconButton-label
        // element which is the same height as using height:, the icon grows vertically as
        // if the label were much larger, despite being set to preserveAspectRatio="xMidYMid meet"
        height: 100%;
    }
}
// This covers the whole page and dims it, to make the bigButtonOverlay more conspicuous.
.behindBigButtonOverlay {
    position: absolute;
    top: 48px;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 1;
    background-color: black;
    opacity: 50%;
    pointer-events: none;
}

.bloomPlayer.hideNextPrevButtons {
    .swiper-button-next,
    .swiper-button-prev {
        display: none;
    }
}

/* override the rule in bloom-preview that puts a border at the bottom of each page
to separate the pages in a continuous scrolling view. Unfortunately that rule is
!important so the only way to beat it is to be !important too. We also need more than
 two classes. */
.bloomPlayer .bloomPlayer-page div.bloom-page {
    border-bottom: initial !important;
}

// Less can't do arithmetic with pixels and mm, and most of our page
// dimensions are in mm, so I'm doing everything related to page dimensions
// that way, on the (print) assumption of 96px/inch.
@pageNumberBottomMargin: 0.529mm; // 2px

/* we're giving pages in this control less margin than in regular previews,
so we need the page number further down to reduce the chance of overlap.
For an online reader we're also going for centered page numbers.
We need the repeated .bloomPlayer class to make the rule take precedence
over anything in our standard stylesheets, though still allowing for
!important in a custom CSS to beat us. */
.bloomPlayer.bloomPlayer.bloomPlayer .numberedPage::after {
    bottom: @pageNumberBottomMargin;
    left: calc(50% - 10px);
    right: unset;
    text-align: left;
}

// For A5 pages read online, we want to keep the size of the marginBox
// the same as when we lay out for a real printed A5 page, so that books
// formatted for that will be sure to look right (though in some reader
// contexts, text might be too small).
// However, we typically don't need much margin, either on a device or
// in a web browser. The reduced page size allows for a 10px margin
// on left, right, and top, with a little more at the bottom to fit
// the page number in. When the page is then scaled to fit the viewport,
// we make the content as big as it can reasonably be.
// We need a lot of .bloomPlayer repeats to beat some rather complex
// rules, especially for marginBox width, which is usually slightly
// increased on the cover where there is no gutter margin. Since our
// cover page has pretty smart automatic layout, we think we can get
// away with forcing everything to the usual width of a content page.
// We also need to beat various rules for different left positioning
// on cover, left, and right pages.
// Enhance: we may eventually want to do this for more page sizes,
// but A5Portrait is by far the most important.
@A5MarginBoxWidth: 108mm; // standard size from other stylesheets
@A5MarginBoxHeight: 180mm;
@bloomPlayerMargin: 2.64mm; // 10px for top/left/right
@pageNumberHeight: 7.93mm; // 30px, typical height for Bloom page number
@pageNumberMargin: 1.77mm; // measured in existing page
@totalHorizontalMargin: @bloomPlayerMargin * 2;
@totalVerticalMargin: @bloomPlayerMargin + @pageNumberMargin + @pageNumberHeight +
    @pageNumberBottomMargin;
@A5DevicePageWidth: @A5MarginBoxWidth + @totalHorizontalMargin;
@A5DevicePageHeight: @A5MarginBoxHeight + @totalVerticalMargin;

// Disabled for now because it messes up books made with our new comic template,
// which has pages with no margin at all.
// .bloomPlayer.bloomPlayer.bloomPlayer.bloomPlayer.bloomPlayer
//     .bloom-page.A5Portrait {
//     min-height: @A5DevicePageHeight;
//     max-height: @A5DevicePageHeight;
//     min-width: @A5DevicePageWidth;
//     max-width: @A5DevicePageWidth;
//     .marginBox {
//         left: @bloomPlayerMargin;
//         width: @A5MarginBoxWidth;
//         top: @bloomPlayerMargin;
//     }
// }

.control-bar .button.disabled {
    color: @disabledButton;
}

.languageMenu .radioGroup {
    flex: 1;
    padding: 20px;
    .radioGroupDiv {
        flex: 1;
        flex-direction: column;
        .chooserItem {
            display: flex;
            flex-direction: row;
            .spacer {
                flex-grow: 1; // pushes the audio icon to the right
            }
            .icon {
                align-self: center; // aligns the audio icon vertically
            }
            // ensure the radio check is inside the circle (BL-7960)
            .MuiRadio-root svg {
                left: 0; // aligns radio button check dot horizontally in ff45
            }
        }
    }
}

html {
    height: 100%;
}

body,
#root {
    // bloom pages have their own margins, we don't need the browser's
    margin: 0;
    // Scaling things down has an odd effect where the browser thinks it needs a scroll range
    // big enough for the original, unscaled size. Since we're shrinking the page to fit,
    // we never need a scroll bar. This prevents it.
    height: 100%;
    overflow: hidden;
    background-color: @bloomGrey;
}

// Styles the special div we create for motion books. It is put at the root of the page and hides
// it completely while containing the preview.
// Note that this div is made by cloning the imageContainer, then making a few modifications. So
// it will have any classes the imageContainer has.  Beware of rules that might override the ones
// here, which are critical for making the motion-book animation fill the page and cover the other
// content.
.bloom-page div.bloom-imageContainer.hidePage {
    height: 100%;
    width: 100%;
    position: absolute !important; // !important should not be needed, but there's a bug in FF45.
    left: 0;
    top: 0;
    z-index: 2000;
    background-color: black; // hide anything not covered by image
}

// If we're trying to hide the page, then the sibling elements must have a lower z-index
// for stacking.
// See https://issues.bloomlibrary.org/youtrack/issue/BL-7452 for details.
.hidePage ~ * {
    z-index: 1;
}

.loadingSpinner {
    display: block !important;
    margin-left: auto;
    margin-right: auto;
    margin-top: 100px;
}

.loadFailedIcon {
    height: 100px !important;
    width: 100px !important;
    display: block !important;
    margin-left: auto;
    margin-right: auto;
    margin-top: 100px;
}

.loadErrorMessage {
    color: @bloomRed;
    text-align: center;
    margin-top: 20px;
    font-family: roboto, sans;
    font-size: 16pt;
}
.errorDetails {
    font-size: 9pt;
    word-wrap: break-word; // error details may contain a very long URL with no spaces; we want to see all of it.
}

// BL-7517 Older books had a tabindex attribute, which newer versions of .bloomd files remove.
// When the attribute is present, tapping on the div causes it to be bordered in orange. (See BL-6849 too.)
*[tabindex]:focus {
    outline: none;
}
